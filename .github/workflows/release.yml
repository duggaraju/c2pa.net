name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      publish_nuget:
        description: 'Publish packages to NuGet.org (workflow_dispatch only).'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  RUST_VERSION: 'stable'
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  generate-version:
    name: Generate Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Debug github.event
        uses: actions/github-script@v7
        with:
          script: |
            console.log('GITHUB EVENT CONTEXT:', JSON.stringify(github.context, null, 2));
      - id: set_version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = process.env.GITHUB_REF || '';
            let version = '';
            if (ref && ref.startsWith('refs/tags/')) {
              version = ref.replace('refs/tags/','').replace(/^v/,'');
            } else if (github && github.context && github.context.eventName === 'workflow_dispatch' && github.context.payload && github.context.payload.inputs && github.context.payload.inputs.version) {
              version = github.context.payload.inputs.version;
            }
            if (!version) {
              core.setFailed('Release workflow requires a version derived from a git tag or provided via the workflow_dispatch input "version". Aborting.');
              return;
            }
            core.setOutput('version', version);

  build:
    name: Build native + .NET (per OS)
    needs: generate-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
          - os: ubuntu-latest
            rid: linux-x64
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          cache: true

      - name: Build native (release)
        working-directory: c2pa-rs
        env:
          RUSTFLAGS: "-A warnings"
        run: |
          cargo build --release -p c2pa-c-ffi --no-default-features --features "rust_native_crypto, file_io"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore and build
        run: |
          dotnet restore && dotnet tool restore
          dotnet build lib/ContentAuthenticity.csproj --configuration Release -r ${{ matrix.rid }} --no-restore

      - name: Pack NuGet (runtime-specific)
        run: |
          dotnet pack lib/ContentAuthenticity.csproj --configuration Release --output ./artifacts/packages --include-symbols --include-source -p:PackageVersion=${{ needs.generate-version.outputs.version }} -p:RuntimeIdentifier=${{ matrix.rid }} --no-build

      - name: Upload runtime package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-${{ matrix.rid }}
          path: ./artifacts/packages/*.nupkg

  merge:
    name: Merge NuGet packages and publish
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts

      - name: Ensure zip/unzip exist
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip unzip

      - name: Merge runtime nupkgs
        run: |
          set -euo pipefail
          mkdir -p merged pkg2 ./artifacts/packages
          pkgs=( $(find ./artifacts -name '*.nupkg' | sort) )
          if [ ${#pkgs[@]} -lt 1 ]; then echo "no nupkg artifacts found"; exit 1; fi
          base=${pkgs[0]}
          echo "Base package: $base"
          # If only one runtime package exists, just copy it through
          if [ ${#pkgs[@]} -eq 1 ]; then
            mkdir -p ./artifacts/packages
            cp "$base" ./artifacts/packages/
            echo "Single package copied"; exit 0
          fi
          other=${pkgs[1]}
          echo "Other package: $other"

          unzip -o "$base" -d merged
          unzip -o "$other" -d pkg2

          if [ -d pkg2/runtimes ]; then
            mkdir -p merged/runtimes
            cp -r pkg2/runtimes/* merged/runtimes/
          fi

          (cd merged && zip -r ../final.nupkg .)
          mkdir -p ./artifacts/packages
          mv final.nupkg ./artifacts/packages/
          echo "Merged package created at ./artifacts/packages/"

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          for pkg in $(find ./artifacts/packages -name '*.nupkg'); do
            echo "Publishing $pkg to GitHub Packages"
            dotnet nuget push "$pkg" --api-key $GITHUB_TOKEN --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          done

      - name: Publish to NuGet.org
        if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.publish_nuget == 'true' || github.event.inputs.publish_nuget == true) }}
        run: |
          set -e
          for pkg in $(find ./artifacts/packages -name '*.nupkg'); do
            echo "Publishing $pkg to NuGet.org"
            dotnet nuget push "$pkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          done
