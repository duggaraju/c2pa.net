name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  RUST_VERSION: '1.88.0'
  BASE_VERSION: '0.4.0'
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
  
jobs:
  generate-version:
    name: Generate Build Version
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - id: set_version
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = process.env.GITHUB_REF || '';
            let baseVersion = process.env.BASE_VERSION || '0.4.0';
            let version = '';

            // If triggered by a tag, use the tag version (strip leading 'v')
            if (ref && ref.startsWith('refs/tags/')) {
              version = ref.replace('refs/tags/','').replace(/^v/,'');
            } else {
              // Try to discover the most recent tag in the repo and use it as the base
              try {
                const { execSync } = require('child_process');
                const latestTag = execSync('git describe --tags --abbrev=0').toString().trim();
                if (latestTag) {
                  baseVersion = latestTag.replace(/^v/,'');
                }
              } catch (e) {
                // no tags available or git not present; fall back to BASE_VERSION
              }

              const runNumber = process.env.GITHUB_RUN_NUMBER || '0';
              const sha = (process.env.GITHUB_SHA || '').slice(0,8);
              const date = new Date().toISOString().slice(0,10).replace(/-/g,'');
              version = `${baseVersion}-ci-${date}.${runNumber}.${sha}`;
            }
            core.setOutput('version', version);

  # Build matrix for different platforms
  build-and-test:
    name: Build and Test
    needs: generate-version
    runs-on: ${{ matrix.os }}${{ matrix.arch == 'arm64' && '-arm64' || '' }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest] 
        arch: [x64, arm64]
        configuration: [Debug, Release]
        exclude:
          # Only run Release builds on Ubuntu to save resources
          - os: ubuntu-latest
            configuration: Debug
          - os: macos-latest
            configuration: Debug
          # macOS arm64 only; skip macOS x64 builds
          - os: macos-latest
            arch: x64
          # Windows arm64 Debug currently unsupported
          - os: windows-latest
            configuration: Debug
            arch: arm64
        include:
          - os: windows-latest
            arch: x64
            rust_target: x86_64-pc-windows-msvc
            runtime: win-x64
          - os: windows-latest
            arch: arm64
            rust_target: aarch64-pc-windows-msvc
            runtime: win-arm64
          - os: ubuntu-latest
            arch: x64
            rust_target: x86_64-unknown-linux-gnu
            runtime: linux-x64
          - os: ubuntu-latest
            arch: arm64
            rust_target: aarch64-unknown-linux-gnu
            runtime: linux-arm64
          - os: macos-latest
            arch: arm64
            rust_target: aarch64-apple-darwin
            runtime: osx-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        cache: true
        target: ${{ matrix.rust_target }}

    # Cache .NET dependencies
    - name: Cache .NET dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.dotnet
        key: ${{ matrix.os }}-${{ matrix.arch }}-dotnet-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.arch }}-dotnet-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-18 clang-18 ${{ matrix.arch == 'arm64' && 'gcc-aarch64-linux-gnu' || '' }}

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm

    # Build Rust c2pa-c-ffi library
    - name: Build Rust FFI library (Release)
      working-directory: c2pa-rs
      env:
        RUSTFLAGS: "-A warnings"
      run: |
        cargo build ${{ matrix.configuration == 'release' && '--release' || '' }} -p c2pa-c-ffi --no-default-features --features "rust_native_crypto" --target ${{ matrix.rust_target }}


    # Restore .NET dependencies
    - name: Restore dependencies
      run: dotnet restore && dotnet tool restore

    # Build .NET solution
    - name: Build solution
      run: |
        dotnet build --configuration ${{ matrix.configuration }} --no-restore --verbosity normal

    # Run tests
    - name: Run tests
      run: |
        dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage"

    # Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.configuration }}-${{ matrix.arch }}
        path: |
          **/TestResults/**/*.trx
          **/TestResults/**/*.xml

    # Upload coverage reports
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      uses: codecov/codecov-action@v5
      with:
        files: "**/TestResults/**/coverage.cobertura.xml"
        fail_ci_if_error: false

    # Create NuGet packages (only on Windows Release)
    - name: Create NuGet packages
      if: matrix.configuration == 'Release'
      run: |
        dotnet pack lib/ContentAuthenticity.csproj --configuration Release --runtime ${{ matrix.runtime }}--no-build --output ./artifacts/packages --include-symbols --include-source -p:PackageVersion=${{ needs.generate-version.outputs.build_version }}

    # Upload NuGet packages as artifacts
    - name: Upload NuGet packages
      if: matrix.os == 'windows-latest' && matrix.configuration == 'Release'
      uses: actions/upload-artifact@v5
      with:
        name: nuget-packages
        path: ./artifacts/packages/*.nupkg

  # Publish job that runs only on main branch pushes or releases
  publish:
    name: Publish NuGet Package
    needs: [build-and-test, generate-version]
    runs-on: windows-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v6
      with:
        name: nuget-packages
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Publish to NuGet.org (only on release)
    - name: Publish to NuGet.org
      if: github.event_name == 'release' && github.event.action == 'published'
      run: |
        $packages = Get-ChildItem -Path ./packages -Filter "*.nupkg" -Recurse
        if ($packages.Count -eq 0) {
          Write-Host "No .nupkg files found to publish"
          exit 1
        }
        
        Write-Host "Found $($packages.Count) package(s) to publish to NuGet.org:"
        foreach ($package in $packages) {
          Write-Host "Publishing: $($package.Name)"
          dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to publish $($package.Name)"
            exit $LASTEXITCODE
          }
        }
        Write-Host "All packages published successfully to NuGet.org"
      shell: pwsh

    # Publish to GitHub Packages (on main branch pushes)
    - name: Publish to GitHub Packages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        $packages = Get-ChildItem -Path ./packages -Filter "*.nupkg" -Recurse
        if ($packages.Count -eq 0) {
          Write-Host "No .nupkg files found to publish"
          exit 1
        }
        
        Write-Host "Found $($packages.Count) package(s) to publish to GitHub Packages:"
        foreach ($package in $packages) {
          Write-Host "Publishing: $($package.Name)"
          dotnet nuget push $package.FullName --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to publish $($package.Name)"
            exit $LASTEXITCODE
          }
        }
        Write-Host "All packages published successfully to GitHub Packages"
      shell: pwsh

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v4
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    # .NET formatting and analysis
    - name: Install dotnet format tool
      run: dotnet tool install -g dotnet-format

    - name: Check .NET formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
